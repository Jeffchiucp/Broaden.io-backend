## Postman Documentation

## What is it?

> How great would it be if we could use [Postman's](https://www.getpostman.com/) well-maintained collections to generate beautiful documentations with a single command?

Well guess what some guy, now you can use Postmanerator to do so! Can I?

Just download the [latest release on Github](https://github.com/aubm/postmanerator/releases/latest). You obviously need to pick the right binary depending on your environment. Then place that binary somewhere in your system that is in your PATH, you might want to rename it to simply `postmanerator`.

Afterwards, export your Postman collection, let's say in `$YOUR_PROJECT/postman/collection.json` and simply run:

```
postmanerator -output=./doc.html -collection=$YOUR_PROJECT/postman/collection.json
```

Want to see the result? Take a look at [this example](http://aubm.github.io/Books-API/).
For the record, this documentation is automatically generated by Postmanerator and published on Github Pages using Travis. Feel free to have a [look at the source repository](https://github.com/aubm/Books-API).

## Configuration

There are chances that the "out-of-the-box" behavior is not good enough for you. Please consider using the following recommendations and command line options to ensure you get the result you expect.

- **Use relevant names and descriptions**: folders and requests names are used to create the structure of the generated documentation. You may want to use relevant headers. Furthermore, feel free to write good descriptions for your folders (documentation sections) and requests, as they will be rendered. You may be interested to know that the `default` theme will parse any [Markdown](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet) content found in descriptions.
- **Use saved responses**: all saved request's responses are rendered in the `default` theme. You may want to use them to show different potential responses to your users, like a "successfull" response or an "invalid data error" response.

### Provide a collection file

The collection is a JSON file generated from the Postman UI. You can get more information about Postman collection from the [official documentation](https://www.getpostman.com/docs/collections).

Use the `-collection=/path/to/collection.json` option to provide the collection to Postmanerator.

### Provide an environment file

The environment file is a JSON file generated from the Postman UI. You can get more information about Postman environments from the [official documentation](https://www.getpostman.com/docs/environments).

Use the `-environment=/path/to/environment.json` option to provide the environment to Postmanerator.

### Provide a theme

By default, Postmanerator will use its `default` theme, but you can change it by using the `-theme=theme_name` option.
You can either provide a theme name from the [official themes repository](https://github.com/aubm/postmanerator-themes), or a full local path to theme folder.

### Provide the output

By default, Postmanerator will print the generated output to the standard output. You can change that by providing a path to the `-output=/path/to/generated/doc.html` option.

### Prevent arbitrary request/response headers to be rendered

Maybe they are some request/response headers you don't want to see in your documentation. You can prevent Postmanerator to render them by providing comma seperated lists of headers to the following options:

```
-ignored-request-headers="Content-Type"
-ignored-response-headers="Content-Type,Content-Length"
```

## Define API structures

You may have noticed that API structures are documented at the beginning of [this example generated documentation](http://aubm.github.io/Books-API/). Therefore you might be interested to know that these elements are not hard coded in the theme. You actually have the ability to provide these information to Postmanerator. How's that? you asked.

If you know how to use Postman to automate integration tests, then you know that these test cases are written in Javascript. Knowing that, you can now use Javascript to define your API structures for Postmanerator. Consider the following code snippet inserted in any of your requests "Tests" pane:

```javascript
/*[[start postmanerator]]*/
function populateNewAPIStructures() {
    APIStructures['student'] = {
        name: 'student',
        description: 'Assessment',
        fields: [
            {name: 'id', description: ''},
            {name: 'color', description: ''},
            {name: 'name', description: ''}
        ]
    };
}
/*[[end postmanerator]]*/
```

The `/*[[start postmanerator]]*/` and `/*[[end postmanerator]]*/` delimiters are important, Postmanerator will search for these delimiters to identify the portion of Javascript it needs to interpret.

The name of the function `populateNewAPIStructures` is also important as Postmanerator will execute this exact function. You can define as many of these code snippets as you need, even in multiple independant requests.

When Postmanerator is done executing all the snippets, it will look for defined objects in the `APIStructures` global variable and make these structures definitions available for the theme.
